generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  age           Int?
  height        Int?
  weight        Float?
  sex           String?
  activityLevel String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  foods         Food[]
  meals         Meal[]
  plans         Plan[]
  routines      Routine[]
}

model Plan {
  id        Int            @id @default(autoincrement())
  name      String
  goal      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean        @default(false)
  userId    Int
  routines  DailyRoutine[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyRoutine {
  id          String   @id @default(uuid())
  date        DateTime
  status      Status   @default(PENDING)
  mealsStatus Json?
  planId      Int
  routineId   Int
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  routine     Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
}

model Routine {
  id            Int            @id @default(autoincrement())
  name          String
  water         Int            @default(0)
  calories      Float          @default(0)
  carbohydrates Float          @default(0)
  proteins      Float          @default(0)
  fats          Float          @default(0)
  fibers        Float          @default(0)
  sodium        Float          @default(0)
  isDeleted     Boolean        @default(false)
  userId        Int
  DailyRoutine  DailyRoutine[]
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals         RoutineMeal[]
}

model RoutineMeal {
  routineId Int
  mealId    Int
  time      String
  meal      Meal    @relation(fields: [mealId], references: [id], onDelete: Cascade)
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@id([routineId, mealId, time])
}

model Meal {
  id            Int           @id @default(autoincrement())
  name          String
  calories      Float         @default(0)
  carbohydrates Float         @default(0)
  proteins      Float         @default(0)
  fats          Float         @default(0)
  fibers        Float         @default(0)
  sodium        Float         @default(0)
  isDeleted     Boolean       @default(false)
  userId        Int
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  foods         MealFood[]
  routines      RoutineMeal[]
}

model MealFood {
  mealId   Int
  foodId   Int
  quantity Float
  food     Food  @relation(fields: [foodId], references: [id], onDelete: Cascade)
  meal     Meal  @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@id([mealId, foodId])
}

model Food {
  id            Int        @id @default(autoincrement())
  name          String
  unit          Unit       @default(GRAMS)
  calories      Float      @default(0)
  carbohydrates Float      @default(0)
  proteins      Float      @default(0)
  fats          Float      @default(0)
  fibers        Float      @default(0)
  sodium        Float      @default(0)
  isDeleted     Boolean    @default(false)
  userId        Int
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals         MealFood[]
}

enum Status {
  PENDING
  COMPLETED
  MISSED
}

enum Unit {
  GRAMS
  MILILITERS
}
