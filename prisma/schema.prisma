generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  age           Int?
  height        Int?
  weight        Float?
  sex           String?
  activityLevel String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  foods         Food[]
  meals         Meal[]
  plans         Plan[]
  routines      Routine[]
}

model Plan {
  id        String         @id @default(uuid())
  name      String
  goal      String
  startDate DateTime
  endDate   DateTime
  userId    String
  routines  DailyRoutine[]
  user      User           @relation(fields: [userId], references: [id])
}

model DailyRoutine {
  id         String      @id @default(uuid())
  date       DateTime
  status     Status      @default(PENDING)
  planId     String
  plan       Plan        @relation(fields: [planId], references: [id])
  dailyMeals DailyMeal[]
}

model DailyMeal {
  dailyRoutineId String
  mealId         String
  time           String
  status         Status       @default(PENDING)
  meal           Meal         @relation(fields: [mealId], references: [id])
  dailyRoutine   DailyRoutine @relation(fields: [dailyRoutineId], references: [id])

  @@id([dailyRoutineId, mealId, time])
}

model Routine {
  id                 String        @id @default(uuid())
  name               String
  water              Int           @default(0)
  totalCalories      Float         @default(0)
  totalCarbohydrates Float         @default(0)
  totalProteins      Float         @default(0)
  totalFats          Float         @default(0)
  totalSodiums       Float         @default(0)
  totalFibers        Float         @default(0)
  userId             String
  meals              RoutineMeal[]
  User               User          @relation(fields: [userId], references: [id])
}

model RoutineMeal {
  routineId String
  mealId    String
  time      String
  meal      Meal    @relation(fields: [mealId], references: [id])
  routine   Routine @relation(fields: [routineId], references: [id])

  @@id([routineId, mealId, time])
}

model Meal {
  id                 String        @id @default(uuid())
  name               String
  totalCalories      Float         @default(0)
  totalCarbohydrates Float         @default(0)
  totalProteins      Float         @default(0)
  totalFats          Float         @default(0)
  totalSodiums       Float         @default(0)
  totalFibers        Float         @default(0)
  userId             String
  routines           RoutineMeal[]
  User               User          @relation(fields: [userId], references: [id])
  foods              MealFood[]
  DailyMeal          DailyMeal[]
}

model MealFood {
  quantity Float
  foodId   String
  mealId   String
  food     Food   @relation(fields: [foodId], references: [id])
  meal     Meal   @relation(fields: [mealId], references: [id])

  @@id([mealId, foodId])
}

model Food {
  id            String     @id @default(uuid())
  name          String
  unit          Unit       @default(GRAMS)
  calories      Float
  carbohydrates Float
  proteins      Float
  fats          Float
  sodiums       Float
  fibers        Float
  userId        String
  User          User       @relation(fields: [userId], references: [id])
  meals         MealFood[]
}

enum Status {
  PENDING
  COMPLETED
  MISSED
}

enum Unit {
  GRAMS
  MILILITERS
}
